<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JS - 标签 - Y-y_x&#39;s Blog</title>
        <link>http://howardyangyixuan.github.io/tags/js/</link>
        <description>JS - 标签 - Y-y_x&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 01 Jan 2022 13:50:09 &#43;0800</lastBuildDate><atom:link href="http://howardyangyixuan.github.io/tags/js/" rel="self" type="application/rss+xml" /><item>
    <title>理解JS中如何实现继承</title>
    <link>http://howardyangyixuan.github.io/posts/%E7%90%86%E8%A7%A3js%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/</link>
    <pubDate>Sat, 01 Jan 2022 13:50:09 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E7%90%86%E8%A7%A3js%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/</guid>
    <description><![CDATA[理解JS中如何实现继承 很多面向对象语言都支持两种继承:接口继承和实现继承。 前者只继承方法签名，后者继承实际的方法。接口继承在 ECMAScript 中是不可能的，]]></description>
</item><item>
    <title>TS泛型的使用</title>
    <link>http://howardyangyixuan.github.io/posts/ts%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Mon, 05 Apr 2021 23:14:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/ts%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[TS范型的使用 软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据]]></description>
</item><item>
    <title>Promise异步编程模型</title>
    <link>http://howardyangyixuan.github.io/posts/promise%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
    <pubDate>Tue, 30 Jun 2020 00:13:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/promise%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
    <description><![CDATA[Promise异步编程模型 Promise优点 规定回调的名字或顺序 拒绝回调地狱 便于捕获错误 初始化一个Promise let promise = new Promise((resolve,reject)=&gt;{ //最初为pend]]></description>
</item><item>
    <title>AJAX实用指南</title>
    <link>http://howardyangyixuan.github.io/posts/ajax%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</link>
    <pubDate>Mon, 15 Jun 2020 00:15:26 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/ajax%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
    <description><![CDATA[AJAX实用指南 AJAX实用指南 1. AJAX技术及其背景 1.1. 什么是AJAX技术？ 1.2. 背景 2. 如何使用AJAX 2.1. AJAX四步走 2.2. 注意 1. AJAX技术及其]]></description>
</item><item>
    <title>JS对象基本用法</title>
    <link>http://howardyangyixuan.github.io/posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
    <pubDate>Wed, 20 May 2020 00:15:26 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[1. JS对象基本用法 1.1. JS对象 定义 无序数据集合 键值对 写法 let obj= {'name':'frank'} let obj= new Object({'name':''frank}) console.log({'name':'frank'}) 如果没有console.log，只是代码块 细节 !!!键名是字符串，就算]]></description>
</item><item>
    <title>JavaScript入门</title>
    <link>http://howardyangyixuan.github.io/posts/javascript%E5%85%A5%E9%97%A8/</link>
    <pubDate>Mon, 11 May 2020 19:54:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/javascript%E5%85%A5%E9%97%A8/</guid>
    <description><![CDATA[JavaScript入门 继续前进！ JavaScript入门 1. JS的诞生 2. JS 的 Prototype 3. JS 的设计缺陷 4. JS 基本语法tips 4.1. &amp;&amp; 和 || 4.2. fn &amp;&amp; fn() 4.3. label 4.4. setTimeout 1. J]]></description>
</item></channel>
</rss>
