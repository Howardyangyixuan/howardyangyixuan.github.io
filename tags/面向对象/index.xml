<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>面向对象 - 标签 - Y-y_x&#39;s Blog</title>
        <link>http://howardyangyixuan.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
        <description>面向对象 - 标签 - Y-y_x&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 23 Aug 2020 22:51:55 &#43;0800</lastBuildDate><atom:link href="http://howardyangyixuan.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" rel="self" type="application/rss+xml" /><item>
    <title>大话设计模式14观察者模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F14%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 23 Aug 2020 22:51:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F14%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：14.观察者模式 观察者模式：定义了一对多的依赖关系，让多个观察者对象同时监听某一主题对象。这个主题对象在状态发生变化时，会通知]]></description>
</item><item>
    <title>大话设计模式13建造者模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F13%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 23 Aug 2020 22:12:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F13%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：13.建造者模式 建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示 TL;DR：分离具体构建代]]></description>
</item><item>
    <title>大话设计模式12外观模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F12%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 23 Aug 2020 22:10:22 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F12%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：12.外观模式 外观模式：为子系统提供一个一致的界面，此模式定义了一个高层的借口，使得子系统更容易使用 TL;DR：封装子系统，对]]></description>
</item><item>
    <title>浅谈MVC</title>
    <link>http://howardyangyixuan.github.io/posts/%E6%B5%85%E8%B0%88mvc/</link>
    <pubDate>Thu, 02 Jul 2020 19:56:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E6%B5%85%E8%B0%88mvc/</guid>
    <description><![CDATA[浅谈 MVC 第一次了解 MVC 是老韩上 EJB 那门课的时候讨论的，View 由 CSS 和 JSP 控制，Controller 是 Servlet 来做，Model 由会话 Bean 和数据库交互处理，没实]]></description>
</item><item>
    <title>大话设计模式11:最少知识原则</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F11%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/</link>
    <pubDate>Tue, 30 Jun 2020 23:53:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F11%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/</guid>
    <description><![CDATA[大话设计模式：11.最少知识原则 最少知识原则（迪米特法则）：如果两个类不必彼此直接通信，那么这两个类就不应该直接相互作用。如果其中一个类需要]]></description>
</item><item>
    <title>大话设计模式10：模版方法模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 17 Jun 2020 20:51:59 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：10.模版方法模式 模版方法模式：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模版方式使得一个子类可以不改变一个算法的]]></description>
</item><item>
    <title>大话设计模式9：原型模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 17 Jun 2020 19:46:04 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：9.原型模式 原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型实例创建新的对象（实例）。 TL;DR：原型模式通过复制]]></description>
</item><item>
    <title>大话设计模式8：工厂模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 05 Jun 2020 17:54:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：8.工厂模式 工厂模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。 TL;DR：]]></description>
</item><item>
    <title>大话设计模式7：代理模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 05 Jun 2020 16:34:45 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：7.代理模式 代理模式：为其他对象提供一种代理，以控制对这个对象的访问 TL;DR：通过共用接口，使得实体可以随时使用代理。 应用场]]></description>
</item><item>
    <title>大话设计模式6：装饰模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 05 Jun 2020 13:37:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：6.装饰模式 装饰模式：动态地给一个对象，添加额外的职责。这种方式比生成子类更加灵活 TL;DR：装饰模式通过包装，分离核心职责和]]></description>
</item></channel>
</rss>
