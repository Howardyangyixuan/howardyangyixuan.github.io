<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>设计模式 - 标签 - Y-y_x&#39;s Blog</title>
        <link>http://howardyangyixuan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <description>设计模式 - 标签 - Y-y_x&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 28 Aug 2020 10:51:13 &#43;0800</lastBuildDate><atom:link href="http://howardyangyixuan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>大话设计模式22：合成/聚合复用原则 &amp; 桥接模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F22%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 28 Aug 2020 10:51:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F22%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：22.合成/聚合复用原则 &amp; 桥接模式 合成/聚合复用原则（CARP）：尽量使用合成/聚合，尽量不要使用类继承（因为继承是一种强耦合]]></description>
</item><item>
    <title>大话设计模式21单例模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F21%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 28 Aug 2020 10:48:15 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F21%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：21.单例模式 单例模式：保证一个类只有一个实例，并提供一个访问它的全局访问点 TL;DR：通过私有化构造方法和私有变量，让类自身]]></description>
</item><item>
    <title>大话设计模式20：迭代器模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F20%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Thu, 27 Aug 2020 16:41:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F20%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：20.迭代器模式 迭代器模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示 TL;DR：C++、Jav]]></description>
</item><item>
    <title>大话设计模式19：组合模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F19%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Thu, 27 Aug 2020 16:41:08 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F19%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：19.组合模式 组合模式：将对象组合成树形结构以表示’部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致]]></description>
</item><item>
    <title>大话设计模式18：备忘录模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F18%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 26 Aug 2020 16:21:31 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F18%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：18.备忘录模式 备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢]]></description>
</item><item>
    <title>大话设计模式17：适配器模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F17%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 26 Aug 2020 16:21:02 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F17%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：17.适配器模式 适配器模式：将一个类的接口转换成客户希望的另外一个接口，使原本由于接口不兼容而不能一起工作的那些类可以一起工作]]></description>
</item><item>
    <title>大话设计模式16：状态模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F16%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Tue, 25 Aug 2020 16:56:21 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F16%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：16.状态模式 状态模式：当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类 TL;DR：当控制一个对象状态]]></description>
</item><item>
    <title>大话设计模式15：抽象工厂模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F15%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Tue, 25 Aug 2020 16:00:06 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F15%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：15.抽象工厂模式 抽象工厂模式：提供了一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类 TL;DR：工厂方法模式的]]></description>
</item><item>
    <title>大话设计模式14：观察者模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F14%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 23 Aug 2020 22:51:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F14%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：14.观察者模式 观察者模式：定义了一对多的依赖关系，让多个观察者对象同时监听某一主题对象。这个主题对象在状态发生变化时，会通知]]></description>
</item><item>
    <title>大话设计模式13：建造者模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F13%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 23 Aug 2020 22:12:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F13%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：13.建造者模式 建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示 TL;DR：分离具体构建代]]></description>
</item></channel>
</rss>
