<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Y-y_x&#39;s Blog</title>
        <link>http://howardyangyixuan.github.io/posts/</link>
        <description>所有文章 | Y-y_x&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 01 Jan 2022 13:50:09 &#43;0800</lastBuildDate><atom:link href="http://howardyangyixuan.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>理解JS中如何实现继承</title>
    <link>http://howardyangyixuan.github.io/posts/%E7%90%86%E8%A7%A3js%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/</link>
    <pubDate>Sat, 01 Jan 2022 13:50:09 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E7%90%86%E8%A7%A3js%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/</guid>
    <description><![CDATA[理解JS中如何实现继承 很多面向对象语言都支持两种继承:接口继承和实现继承。 前者只继承方法签名，后者继承实际的方法。接口继承在 ECMAScript 中是不可能的，]]></description>
</item><item>
    <title>TS泛型的使用</title>
    <link>http://howardyangyixuan.github.io/posts/ts%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Mon, 05 Apr 2021 23:14:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/ts%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[TS范型的使用 软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据]]></description>
</item><item>
    <title>软件工程1：传统软件系统与基于深度学习的软件系统差异分析</title>
    <link>http://howardyangyixuan.github.io/posts/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B1%E4%BC%A0%E7%BB%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B7%AE%E5%BC%82%E5%88%86%E6%9E%90/</link>
    <pubDate>Tue, 20 Oct 2020 08:29:25 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B1%E4%BC%A0%E7%BB%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B7%AE%E5%BC%82%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[软件工程：1.传统软件系统与基于深度学习的软件系统差异分析 1. 运行机制 运行机制的不同指明了传统软件系统和基于深度学习软件系统的分界 传统软件系统]]></description>
</item><item>
    <title>大话设计模式28：访问者模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F28%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 30 Aug 2020 11:28:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F28%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：28.访问者模式 访问者模式：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的]]></description>
</item><item>
    <title>大话设计模式27：解释器模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F27%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 30 Aug 2020 11:28:19 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F27%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：27.解释器模式 解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，给这个解释器使用该表示来解释语言中的句子 T]]></description>
</item><item>
    <title>大话设计模式26：享元模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F26%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 30 Aug 2020 08:07:46 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F26%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：26.享元模式 享元模式：运用共享技术有效地支持大量细粒度的对象 TL;DR：通过将可共享的内部状态保留在类内，外部状态在调用时传]]></description>
</item><item>
    <title>大话设计模式25：中介者模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F25%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 30 Aug 2020 08:07:32 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F25%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：25.中介者模式 中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可]]></description>
</item><item>
    <title>大话设计模式24：职责链模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F24%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 29 Aug 2020 08:08:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F24%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：24.职责链模式 迭代器模式：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿]]></description>
</item><item>
    <title>大话设计模式23：命令模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F23%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 29 Aug 2020 08:07:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F23%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：23.命令模式 命令模式：将一个请求封装为一个对象，从而使用户可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支]]></description>
</item><item>
    <title>大话设计模式22：合成/聚合复用原则 &amp; 桥接模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F22%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 28 Aug 2020 10:51:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F22%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：22.合成/聚合复用原则 &amp; 桥接模式 合成/聚合复用原则（CARP）：尽量使用合成/聚合，尽量不要使用类继承（因为继承是一种强耦合]]></description>
</item></channel>
</rss>
