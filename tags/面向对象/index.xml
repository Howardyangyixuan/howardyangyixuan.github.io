<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>面向对象 - 标签 - Y-y_x&#39;s Blog</title>
        <link>http://howardyangyixuan.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
        <description>面向对象 - 标签 - Y-y_x&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 17 Jun 2020 20:51:59 &#43;0800</lastBuildDate><atom:link href="http://howardyangyixuan.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" rel="self" type="application/rss+xml" /><item>
    <title>大话设计模式10：模版方法模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 17 Jun 2020 20:51:59 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：10.模版方法模式 模版方法模式：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模版方式使得一个子类可以不改变一个算法的]]></description>
</item><item>
    <title>大话设计模式9：原型模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 17 Jun 2020 19:46:04 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：9.原型模式 原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型实例创建新的对象（实例）。 TL;DR：原型模式通过复制]]></description>
</item><item>
    <title>大话设计模式8：工厂模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 05 Jun 2020 17:54:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：8.工厂模式 工厂模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。 TL;DR：]]></description>
</item><item>
    <title>大话设计模式7：代理模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 05 Jun 2020 16:34:45 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：7.代理模式 代理模式：为其他对象提供一种代理，以控制对这个对象的访问 TL;DR：通过共用接口，使得实体可以随时使用代理。 应用场]]></description>
</item><item>
    <title>大话设计模式6：装饰模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 05 Jun 2020 13:37:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：6.装饰模式 装饰模式：动态地给一个对象，添加额外的职责。这种方式比生成子类更加灵活 TL;DR：装饰模式通过包装，分离核心职责和]]></description>
</item><item>
    <title>大话设计模式3/4/5：四个设计原则</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3-4-5%E5%9B%9B%E4%B8%AA%E5%8E%9F%E5%88%99/</link>
    <pubDate>Mon, 18 May 2020 00:12:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3-4-5%E5%9B%9B%E4%B8%AA%E5%8E%9F%E5%88%99/</guid>
    <description><![CDATA[大话设计模式 3/4/5：四个设计原则 大话设计模式 3/4/5：四个设计原则 1. 单一职责原则(SRP: Single Responsibility Principle)： 2. 开放-封闭原则(]]></description>
</item><item>
    <title>大话设计模式：2.策略模式</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 16 May 2020 23:59:52 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：2.策略模式 策略模式：定义了算法家族，分别封装，相互之间可以替换，使算法的变换不会影响使用算法的客户。 TL;DR：策略模式就是]]></description>
</item><item>
    <title>大话设计模式：1.简单工厂模式&amp;UML类图</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 15 May 2020 20:15:05 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[大话设计模式：1.简单工厂模式 &amp; UML类图 前几章应该比较简单，快速推进！ 大话设计模式：1.简单工厂模式 &amp; UML类图 1. 设计一个计算器：基本的面]]></description>
</item><item>
    <title>大话设计模式：0.面向对象基础</title>
    <link>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
    <pubDate>Thu, 14 May 2020 22:24:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://howardyangyixuan.github.io/posts/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
    <description><![CDATA[大话设计模式：0.面向对象基础 去年软工课上张老师苦口婆心：多线程+设计模式，没有总结性的博客和笔记，拖了快一年了。终于找到了合适的方式重新开]]></description>
</item></channel>
</rss>
